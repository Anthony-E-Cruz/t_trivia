{"version":3,"sources":["components/nav_bar.jsx","components/trivia.jsx","App.jsx","reportWebVitals.js","reducers/entities_reducer.js","reducers/root_reducer.js","index.js","store/store.js"],"names":["Pins","props","Navbar","collapseOnSelect","expand","bg","variant","Brand","href","Toggle","aria-controls","Collapse","id","Nav","className","Link","React","Component","connect","state","dispatch","questions","currentQuestion","score","this","loadQuestions","e","preventDefault","correctAnswer","correct","answer","currentTarget","value","setState","length","question","answers","incorrect","push","listedQuestions","map","ele","Button","onClick","handleSubmit","bind","ButtonGroup","vertical","handleRestart","shuffle","data","slice","console","log","array","sort","Math","random","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","entitiesReducer","combineReducers","rootReducer","entities","store","preloadedState","createStore","applyMiddleware","thunk","configureStore","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.40b0ff8b.chunk.js","sourcesContent":["import { connect } from \"react-redux\";\nimport React from \"react\";\nimport { Navbar, Nav, Form, Button, NavDropdown} from \"react-bootstrap\"\n\nclass Pins extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return(\n      <div>\n        <>\n          <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\n            <Navbar.Brand href=\"#home\">Trivia</Navbar.Brand>\n            <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n            <Navbar.Collapse id=\"responsive-navbar-nav\">\n              <Nav className=\"mr-auto\">\n                <Nav.Link href=\"https://github.com/Anthony-E-Cruz\">Github</Nav.Link>\n                <Nav.Link href=\"https://www.linkedin.com/in/anthonyecruz/\">LinkedIn</Nav.Link>\n                <Nav.Link href=\"https://angel.co/u/anthony-cruz-13\">Angel List</Nav.Link>\n              </Nav>\n            </Navbar.Collapse>\n          </Navbar>\n        </>\n      </div>\n    )\n  }\n}\n\nconst msp = (state) => {\n  return {\n    \n  };\n};\n\nconst mdp = (dispatch) => ({\n  \n});\n\nexport default connect(msp, mdp)(Pins);","import { connect } from \"react-redux\";\nimport React from \"react\";\nimport data from \"../data/data.json\"\nimport { ButtonGroup, Button, Form, NavDropdown } from \"react-bootstrap\"\n\nclass Pins extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      questions: [],\n      currentQuestion: 0,\n      score: 0\n    }\n  }\n\n  componentDidMount() {\n    this.loadQuestions()\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n    const currentQuestion = this.state.currentQuestion\n    const correctAnswer = this.state.questions[currentQuestion].correct\n    const answer = e.currentTarget.value\n    this.setState({ currentQuestion: this.state.currentQuestion + 1 })\n    if (answer === correctAnswer) {\n      this.setState({ score: this.state.score + 1 })\n    }\n  }\n\n  handleRestart(e) {\n    e.preventDefault();\n    this.setState({\n      questions: [],\n      currentQuestion: 0,\n      score: 0\n    });\n    this.loadQuestions();\n  }\n\n  question() {\n    if (this.state.questions.length && this.state.currentQuestion !== 10) {\n      const currentQuestion = this.state.currentQuestion\n      const question = this.state.questions[currentQuestion].question\n      const answers = this.state.questions[currentQuestion].incorrect\n      answers.push(this.state.questions[currentQuestion].correct)\n      // this.setState({\n      //   currentQuestion: question,\n      //   currentAnswers: answers\n      // })      \n      const listedQuestions = answers.map(ele => {\n        return (\n          <Button\n            onClick={this.handleSubmit.bind(this)}\n            value={ele}\n          >{ele}</Button>)\n      })\n      return (\n        <div>\n          <p>\n            {question}\n          </p>\n          {/* <form onSubmit={this.handleSubmit.bind(this)}> */}\n          <ButtonGroup vertical>\n            {listedQuestions}\n          </ButtonGroup>\n          {/* </form> */}\n        </div>\n      )\n    } else if (this.state.currentQuestion === 10) {\n      return (\n        <div>\n          GAME OVER\n          <button onClick={this.handleRestart.bind(this)}>Try Again?</button>\n        </div>\n\n      )\n    } else {\n      return null\n    }\n  }\n\n  loadQuestions() {\n    const questions = this.shuffle(data)\n    questions.slice(0, 10)\n    this.setState({ questions: questions.slice(0, 10) })\n    console.log(this.state)\n  }\n\n  shuffle(array) {\n    return (array.sort(() => Math.random() - 0.5))\n  }\n\n  render() {\n    // const questions = JSON.parse(data)\n    // console.log(questions[0])\n    const score = this.state.score\n    console.log(this.state)\n    return (\n      <div>\n        <div>{score}</div>\n        <div>\n          {this.question()}\n        </div>\n      </div>\n    )\n  }\n}\n\nconst msp = (state) => {\n  return {\n\n  };\n};\n\nconst mdp = (dispatch) => ({\n\n});\n\nexport default connect(msp, mdp)(Pins);","import './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport NavBar from './components/nav_bar';\nimport Trivia from './components/trivia';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <NavBar></NavBar>\n        <Trivia></Trivia>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { combineReducers } from \"redux\";\n\nconst entitiesReducer = combineReducers({\n  \n});\n\nexport default entitiesReducer;","import { combineReducers } from 'redux';\nimport entitiesReducer from './entities_reducer';\n\nconst rootReducer = combineReducers({\n  entities: entitiesReducer,\n});\n\nexport default rootReducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from \"react-redux\";\n// import { configure } from '@testing-library/react';\nimport configureStore from './store/store'\n\nconst store = configureStore();\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import { createStore, applyMiddleware } from \"redux\";\n// import logger from \"redux-logger\";\nimport thunk from \"redux-thunk\";\nimport rootReducer from \"../reducers/root_reducer\";\n\nconst configureStore = (preloadedState = {}) =>\n  createStore(rootReducer, preloadedState, applyMiddleware(thunk)\n);\n\nexport default configureStore;"],"sourceRoot":""}